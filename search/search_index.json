{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Peasy: An Intuitive Development Environment for P <p>  Download Peasy for VS Code  </p> <p>Peasy is a VS Code language extension created by the P team to enable a richer, more intuitive user interface while developing P programs. It equips users with a familiar programming environment for developing, visualizing, and reviewing P code, expanding the true potential of P users.</p> <p>Peasy achieves this by providing a VS Code language extension for editing P programs and an intuitive interface for visualizing and reviewing the formal design and specification of a distributed system as a collection of P state machines.</p> The Motivation Behind Peasy <p>Peasy brings the full power of an Intuitive Development Environment, including an editor, visualizer, checker, reviewer to P users.</p> <p>Peasy achieves this by providing a VS code language extension for editing P programs and an intuitive interface for visualizing and reviewing the formal design and specification of a distributed system as a collection of P state machines.</p> <p>Peasy enables the common interface of unit testing to model checking of P programs.</p> <p>Peasy also provides a trace visualizer to debug counter examples reported by model checker as a message sequence chart and also the ability to single step through the error trace using the VS code debugger.</p> <p>Peasy can also be used as a documentation tool leveraged by the service teams during design reviews to better understand/describe the complex system design.</p> Transforming the User Experience <p>From the very beginning of users utilizing P to write formal models of their projects and problems, users clamored for a VSCode extension for the language P that would allow them to streamline the process of developing in P. Therefore, the P Team went to work to create a plugin that would suit all their users' needs. We aim for this extension to attract new users to develop in P with ease as well as transform the user experience for current P developers.</p> Keyboard Shortcuts Keypress Description F4 Shows a dropdown menu to select a P project F5 Compiles the current P Project F6 Opens the Peasy Trace Visualizer Webview F7 Generates code to visualize state machines of the current P project Ctrl + S Saves and compiles the P project Peasy Features <p>Syntax Highlighting Learn more.</p> <p>Automatic Compilation Learn more.</p> <p>Snippets Learn more.</p> <p>Error Reporting Learn more.</p> <p>Testing Framework Learn more.</p> <p>Trace Visualizer Learn more.</p> <p>State Machine Visualization Learn more.</p>"},{"location":"compilingCode/","title":"Compiling Code","text":"Compiling Code"},{"location":"compilingCode/#automatic-compilation","title":"Automatic Compilation","text":"<p>Compiling P programs is now super easy with Peasy!</p> <p>Simply press F5 or <code>Save</code> in VS Code and your project will automatically compile the current P project with the <code>p compile</code> command.</p>"},{"location":"compilingCode/#error-reporting","title":"Error Reporting","text":"<p>Peasy automatically detects compilation errors in your P project. There are two types of compile-time errors in P: Parse Errors and Type Errors.</p> <p>If compiling a P project with F5 triggers errors, you can simply open the <code>Problems</code> panel in VS Code to view all compilation errors in the current P project. Then, you can jump to the error location by simply clicking the error.</p>"},{"location":"compilingCode/#compiling-multiple-projects","title":"Compiling Multiple Projects","text":"<p>When working in a directory with a single P project, Peasy automatically identifies the P project.</p> <p>But what if there are multiple P projects in the same directory?</p> <p>To select another P project, press F4. This will trigger a pop-up that shows all the available P projects in your current working directory. Simply click or select one of them to change the current P project!</p>"},{"location":"contribute/","title":"Contributing to the Peasy Extension","text":"Contribute to Peasy! <p>If you would like to contribute or add to the current state of the Peasy extension, here are the steps to do so:</p> <ol> <li> <p>Clone the Peasy repository.</p> </li> <li> <p>Navigate into the directory of the extension on your Terminal or on a coding editor. Run the following command on the command line.</p> <pre><code>cd peasy-ide-vscode\n</code></pre> </li> <li> <p>Build the repository to convert Typescript code into Javascript code.</p> <p>How to Build Peasy Repository</p> <ul> <li>Mac: Cmd+Shift+B</li> <li>Windows: Ctrl+Shift+B</li> </ul> </li> <li> <p>In order to test out the extension, press F5 to create an <code>Extension Development Host</code> where you can open P projects to view how the extension looks in its current state.</p> </li> </ol> <p></p>"},{"location":"demo/","title":"Demo","text":"Demo <p>The demo video gives you a quick overview of various features of Peasy and helps you get familiar with them</p>"},{"location":"editingCode/","title":"Editing Code","text":"Editing Code"},{"location":"editingCode/#snippet-auto-completion","title":"Snippet Auto-Completion","text":"<p>Coding in P is now much easier with snippets! Snippets allow P developers to complete templates of repeating code patterns in P, such as state machines, P statements, test cases, and more. Snippets appear through Intellisense when you type out the beginning of P keywords such as machine or test or send.</p> <p>After selecting a particular snippet, press <code>Tab</code> in order to jump to edit each placeholder in the snippet.</p> <p>Snippets help P developers code faster and easier because they don't need to refer back to documentation for help when coding common data structures in P.</p> <p>Below is an example demo of coding with snippets in P!</p>"},{"location":"editingCode/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Syntax highlighting in P makes developing P programs easier, faster, and more enjoyable.</p> <p>We created a Custom P theme that we suggest, but feel free to change the theme to whatever you like!</p> <p>Here is a sample of syntax highlighting for the Two Phase Commit protocol from the P tutorial. </p> <p></p>"},{"location":"installingPeasy/","title":"Installing Peasy","text":"Installing Peasy"},{"location":"installingPeasy/#installation","title":"Installation","text":"<p>Installing P</p> <p>Follow the Installing P page to install P (version &gt;= 2.0.15) based on the platform you are using. </p> Make sure that you installed the right version of P (i.e., version &gt;= 2.0.15) <p>Run <code>p --version</code> command to get the version of P</p> <p>Installing VS Code</p> <p>Follow the VS Code documentation to download and install VS Code (version &gt;= 1.78.0) based on the platform you are using</p> Make sure that you installed the right version of VS Code (i.e., version &gt;= 1.78.0) <p>To get the version of VS Code</p> <ul> <li> <p>On macOS, go to Code &gt; About Visual Studio Code.</p> </li> <li> <p>On Windows and Linux, go to Help &gt; About.</p> </li> </ul> <p>Installing Peasy</p> <ul> <li>Open VS Code</li> <li>Select View and then click Extensions to open Extension View. Alternatively, you can also click on the Extensions shortcut on the left side navigation bar</li> <li>Enter \"Peasy Extension\" in the marketplace search box and select the extension</li> <li>Click on the install button to download and install the Peasy extension</li> </ul> <p>It is recommended to restart the VS Code after installation</p>"},{"location":"installingPeasy/#creating-your-first-p-project","title":"Creating your First P Project","text":"<p>Read the Structure of a P Program and P Project file pages to understand a P project structure</p> <p>Your First P Project structure should look like this: <pre><code>My_First_P_Project\n|\n+-- PSpec\n|   +-- ExampleSpecFile.p\n+-- PSrc\n|   +-- ExampleSrcFile.p\n+-- PTst\n|   +-- TestDriver.p\n|   +-- Testscript.p\n+-- MyFirstPProject.pproj\n</code></pre> There are many tutorial projects that can help you get started with your first P project. Read the tutorials page for detailed explanation</p>"},{"location":"installingPeasy/#running-p-program","title":"Running P program","text":"<p>Compiling P Project</p> <p>Press F5 or <code>Save</code> in your VSCode and your project will automatically compile the current P project folder</p> <p>Alternatively, you can compile your P project manually by running <code>p compile</code> in your terminal. Read Compiling a P Program page for more details.</p> <p>Running P Testcases</p> <p>Navigate to the Testing Panel in VSCode and click on the play button to run the desired testcases. Read Running Testcases section in the user guide for more details.</p>"},{"location":"motivations/","title":"The Motivation Behind Peasy","text":"The Motivation Behind Peasy <p>Peasy brings the full power of an Intuitive Development Environment, including an editor, visualizer, checker, reviewer to P users.</p> <p>Peasy achieves this by providing a VS code language extension for editing P programs and an intuitive interface for visualizing and reviewing the formal design and specification of a distributed system as a collection of P state machines.</p> <p>Peasy enables the common interface of unit testing to model checking of P programs.</p> <p>Peasy also provides a trace visualizer to debug counter examples reported by model checker as a message sequence chart and also the ability to single step through the error trace using the VS code debugger.</p> <p>Peasy can also be used as a documentation tool leveraged by the service teams during design reviews to better understand/describe the complex system design.</p> Transforming the User Experience <p>From the very beginning of users utilizing P to write formal models of their projects and problems, users clamored for a VSCode extension for the language P that would allow them to streamline the process of developing in P. Therefore, the P Team went to work to create a plugin that would suit all their users' needs. We aim for this extension to attract new users to develop in P with ease as well as transform the user experience for current P developers.</p>"},{"location":"runningTestcases/","title":"Running Testcases","text":"How to Run P Test Cases <p>Testing P programs is also super easy with Peasy!</p> <p>Simply click the  button next to a test case to run it.</p> <p>The Testing Panel in VS Code lists all P test cases. In this panel, click the  button to run test cases or jump to the corresponding test case in the P program by pressing the icon right next to  button. </p>"},{"location":"shortcutsAndCommands/","title":"Keyboard Shortcuts and Commands","text":"Key Bindings and Commands <p>Keyboard Shortcuts</p> Keypress Description F4 Shows a dropdown menu to select a P project F5 Compiles the current P Project F6 Opens the Peasy Trace Visualizer Webview F7 Generates code to visualize state machines of the current P project Ctrl + S Saves and compiles the P project <p>VS Code Commands</p> <ul> <li><code>PeasyViz: Run</code> - Opens the Web View panel and launches the Trace Visualizer</li> </ul>"},{"location":"visualizingStateMachines/","title":"Visualizing State Machines","text":"Peasy State Machine Visualizations <p>Many P users wanted a method of creating visualizations of P state machines and their transitions, states, and events to help supplement design documents, visualize P code, and help to better understand the way P state machines worked. With the help of the open-source tool Stately, that dream is now realized. The stately tool </p> <p>Acknowledgement</p> <p>The Stately tool's state machine visualization capability has been leveraged to visualize the logic of a given P state machine. To understand more about XState  go through their official documentation and Github repository</p> <p>In order to create visualizations of P state machines, follow these steps or scroll down to watch a demo:</p> <ol> <li>Press F7 to run the command <code>p compile --mode stately</code> in the terminal. Your visualization code is generated! A message in red should be sent through the terminal.</li> </ol> <p></p> <ol> <li>Navigate to the file using Ctrl <code>Click</code> or Cmd <code>Click</code>. Copy-and-paste the file contents into https://stately.ai/viz.</li> <li>Click the Visualize button on the bottom left!</li> </ol> <p>Voila! Here is an example visualization using the P Tutorial's Two Phase Commit project.</p> <p></p> How to Navigate Stately's Open Source Visualization Website <p>Every visualization contains exactly one state machine. The name of the machine is at the top left; in this case, the machine is called <code>Coordinator</code>. All the shapes and arrows inside are part of the state machine <code>Coordinator</code>.</p> <p>States are represented with squares, and events are represented with ovals.The beginning state is pointed to with an arrow. In the above case, the beginning state is <code>Init</code>.</p> <p>The state WaitForTransaction is outlined in blue because the machine always travelled from the <code>Init</code> State to the WaitForTransaction state. The event <code>eTransReq</code> is colored in light blue because the state machine <code>Coordinator</code> is waiting for that one event to happen. Click <code>eWhileTransReq</code>, and the three other events will light up because the <code>Coordinator</code> machine is now waiting for one of the other three events to happen.</p> <p>This way, you can interact with these P state machine visualizations too!</p> <p>Stately's website contains four tabs:</p> <ul> <li>Code Tab: Use this tab to copy-and-paste code to visualize state machines.</li> <li>State Tab: This tab provides information on the state the user is currently at in the machine.</li> <li>Events Tab: This tab logs all events that have occurred so far among all machines.</li> <li>Actors Tab: Use this tab to switch to different P state machines in the visualization.</li> </ul> State Machine Visualization Tool Tutorial"},{"location":"trace-visualizer/feature_basics/","title":"Basics","text":"Basics <p>Let's start with some of the basics of the trace visualizer\u2014how to interface with the trace visualizer!</p> <p>Log/Node Highlighting</p> <p>When hovering over a log, it highlights the corresponding node in the main graph panel (center panel), and conversely, hovering over a node highlights the corresponding log in the logs panel (left panel).</p> Demo Video: Log and Node Highlighting <p> </p> <p>Collapsible Nodes</p> <p>When clicking a node, you can choose to <code>Collapse</code> or <code>Expand</code> the sequence of individual machine nodes for a more compact UI.</p> Demo Video: How to collapse/expand nodes in trace visualizer? <p> </p> <p>Machine Toggling</p> <p>Machines can be toggled on or off, allowing users to show or hide a machine for enhanced analysis.</p> Demo Video: How to toggle machines in trace visualizer? <p> </p> <p>Machines Filtering</p> <p>Filtering a machine will remove all machines that do not have a direct connection to the current machine.</p> Demo Video: How to remove selected machines in trace visualizer? <p><ul> <li>         For example, in the following video demo, we first filtered the machine <code>Coordinator(6)</code>, which hid all machines that have no direct connections to <code>Coordinator(6)</code>. We then filtered the machine <code>Client(9)</code> as well, which removed all other machines since none of them were connected to both <code>Coordinator(6)</code> and <code>Client(9)</code>.     </li> </ul></p> <p> </p> <p>Show More Node Information</p> <p>When you click on an individual node in the graph, a dialog box will open containing the log text associated with the node by default. The dialog box also includes a <code>Show More</code> button. Clicking the <code>Show More</code> button will reveal additional details and data associated with the log.</p> Demo Video: How to view additional node information in trace visualizer? <p> </p>"},{"location":"trace-visualizer/feature_compare_contrast/","title":"Compare and Contrast","text":"Compare and Contrast <p>Finally, let's discuss the last feature of the Peasy Trace Visualizer: comparing and contrasting multiple traces. When selecting traces to visualize upon launching the trace visualizer, you can choose to select multiple JSON traces at once. (It is suggested that you place all the traces in one folder to facilitate easier selection in the file dialog window.)</p> <p>View Different Traces</p> <p>The trace visualizer interface for viewing multiple traces remains mostly consistent, with a few exceptions. On the left panel, alongside the <code>Log lines</code> and <code>Motifs</code> tabs, there is now a <code>Clusters</code> tab as well. Furthermore, within the central graph panel, there exists a dropdown option for selecting the different traces that have been chosen. Lastly, located at the upper section of the right panel, there is an <code>PAIRWISE</code> option which we will discuss shortly.</p> Demo Video: How to visualize multiple traces in trace visualizer? <p>In the video demo below, we visualized three traces and switched between them by selecting the corresponding option from the dropdown in the central panel.</p> <p> </p> <p>Trace Clusters</p> <p>The new <code>Clusters</code> tab at the top of the left panel allows us to separate traces into different groups based on a chosen metric between <code>number of machines</code> or <code>trace comparison</code>.</p> <ul> <li>         Clustering by the <code>number of machines</code> groups traces from the smallest to the largest number of machines. In the example below, with the three traces that we selected earlier, they all have the same number of machines.     </li> </ul> <p></p> <ul> <li>         Clustering by the <code>trace comparison</code> groups traces to provide an overview of how the traces differ from a selected base trace. When choosing to cluster by <code>trace comparison</code>, a dropdown menu appears to select a base trace. Subsequently, options become available for selecting traces that have either the same or different logs as the base trace, as well as traces with the same or different machines. In the example below, as all three traces have different machines from each other and contain varying logs, only the sub-category of <code>Different log from base</code> under the <code>Different machines from base</code> category is shown.     </li> </ul> <p></p> <p>Pairwise Comparisons</p> <p>Beyond viewing the traces individually, the trace visualizer also supports a side-by-side comparison. You can click the <code>PAIRWISE</code> button at the top of the right panel to view two traces side by side. When in <code>PAIRWISE</code> mode, another option appears at the top of the right panel called <code>SHOW DIFFERENCES</code>. Clicking <code>SHOW DIFFERENCES</code> will highlight any differences between the two traces in the graph (center panel) by presenting them as diamond shapes.</p> <ul> <li>         The diamond shape indicates that a machine/node is present in one trace but not in the other. Below, you'll find some images to assist you.     </li> <li>         In the top row of machines, we observe that <code>tcMultipleClientsNoFailure1</code> (left side) corresponds to the machine named <code>Client(7)</code>, and <code>tcMultipleClientsNoFailure2</code> (right side) corresponds to the machine named <code>Client(8)</code>. The diamond symbol displayed on <code>Client(7)</code> within <code>tcMultipleClientsNoFailure1</code> indicates that <code>Client(7)</code> is present in <code>tcMultipleClientsNoFailure1</code> but not in <code>tcMultipleClientsNoFailure2</code>.     </li> <li>         We can also observe a diamond-shaped node under the machine <code>Client(9)</code>. In the context of <code>tcMultipleClientsNoFailure1</code>, this node corresponds to the log entry: <pre><code>'Client(9)' in state 'SendWriteTransaction' sent event 'eWriteTransReq with payload (client=Client(9), trans=key=\"3\", val=8, transId=202)' to 'Coordinator(6)'.</code></pre>Conversely, in <code>tcMultipleClientsNoFailure2</code>, the node corresponds to a different log entry: <pre><code>'Client(9)' in state 'SendWriteTransaction' sent event 'eWriteTransReq with payload (client=Client(9), trans=key=\"8\", val=2, transId=202)' to 'Coordinator(6)'.</code></pre> The notable distinction between these two nodes lies in their payloads, which are distinct.     </li> </ul> <p>There you have it! Now, go ahead and try out the trace visualizer yourself to debug your P program!</p>"},{"location":"trace-visualizer/feature_motifs/","title":"Motifs","text":"Motifs <p>In context of a trace visualizer, a motif is a recurring pattern of events you find in a trace. Motifs provide P developers with a means to search for specific communication patterns within the graph. These patterns can greatly assist in debugging sessions, helping developers understand how the machines are interacting with each other.</p> <p>Default Motifs</p> <p>The trace visualizer comes with default motif options available under the 'Motif' tab in the left panel. By default, there are <code>2-event</code>, <code>3-event</code>, and <code>4-event</code> motifs. Selecting any of these default motif options will highlight paths in the graph that match the motif pattern.</p> Demo Video: How to use default motifs in trace visualizer? <p>In the following video demo, paths in the graph that match <code>Motif 1</code>, a <code>2-event</code> motif, are highlighted. This motif represents a simple send-receive pattern (one machine sends an event to another machine, and that machine receives the event).</p> <p> </p> <p>Custom Motifs</p> <p>In addition to the default motifs, you can also build your own custom motifs! You can build them in the search bar under the <code>Structured Search</code> tab. Here's how you can interact with the custom motif builder.</p> <ul> <li>A single click on a machine line creates a node in that machine.</li> <li>Clicking and dragging connects one machine's node to another machine's node.</li> <li>Double-clicking a node deletes it.</li> </ul> Demo Video: How to use custom motifs in trace visualizer? <p>In the video demo below, a custom motif was built that searches for patterns where <code>Machine 1</code> sends something to <code>Machine 2</code>, then later sends something to <code>Machine 3</code>, and finally sends something to <code>Machine 4</code>.</p> <p> </p> <p>P Motifs</p> <p>Lastly, we have P-specific motifs! With P-specific motifs, you can discover specific sequences of send-receive patterns that satisfy particular constraints within the graph using the following syntax in the search bar.</p> <ul> <li><code>#pmotif=({constraint1}&gt;{constraint2}&gt;&gt;{constraint3}...)</code></li> <li><code>constraint[n]</code> can be any filtering format supported by the basic search bar.</li> <li>         The characters <code>&gt;</code> and <code>&gt;&gt;</code> indicate the searching behavior after a constraint is satisfied.         Typing <code>#pmotif=({constraint1}&gt;{constraint2})</code> in the search bar will highlight a send-receive pattern where the first send event satisfies <code>constraint1</code> and the immediate subsequent send event satisfies <code>constraint2</code>.         In contrast, typing <code>#pmotif=({constraint1}&gt;&gt;{constraint2})</code> in the search bar will highlight send-receive patterns where the first send event satisfies <code>constraint1</code> and any second send event that follows the first one satisfies <code>constraint2</code>.     </li> </ul> More explanation with an example <p><ul> <li><code>#pmotif=({eInformCoordinator &amp;&amp; target=\"Participant(3)\"}&gt;&gt;{\"status=0\"}&gt;{target=\"Client(8)\"})</code></li> <li>         This P motif will highlight a sequence of send-receive patterns as follows: The first send event will satisfy the constraint that the node contains the text <code>eInformCoordinator</code> and has a field <code>target</code> equal to <code>Participant(3)</code>. Then, following this first send event, it will highlight any send events afterwards (indicated by <code>&gt;&gt;</code>) that satisfy the constraint that the node contains the text <code>status=0</code> or any of the node's fields' values contain the text <code>status=0</code>. Lastly, we are searching for an immediate send event after any of the send events just found that satisfies the last constraint that the node contain the field <code>target</code> with its value equal to <code>Client(8)</code>.     </li> </ul></p> Demo Video: How to use p-specific motifs in trace visualizer? <p>Another example is shown in the following video demo with this P motif: <code>#pmotif=({eWriteTransReq}&gt;{eWriteTransResp}&gt;{eReadTransReq})</code>. This P motif looks for a sequence of send-receive patterns where the first is a send event that contains the text <code>eWriteTransReq</code>, then an immediate second send event that contains the text <code>eWriteTransResp</code>, and lastly, an immediate third send event that contains the text <code>eReadTransReq</code>.</p> <p> </p>"},{"location":"trace-visualizer/feature_search_bar/","title":"Search Bar","text":"Search Bar <p>Now let's move on with the search bar filtering capabilities!</p> <p> Filtering by Fields</p> <p>We can filter out specific nodes/logs using their associated fields as follows: <code>{fieldName}={value}</code>. Typing this into the search bar will filter out all nodes/logs that have the <code>fieldName</code> set to <code>value</code>.</p> More explanation with an example <p><ul> <li>         For example, <code>isEntry=true</code> will highlight all logs that have a field of <code>isEntry</code> with a value of <code>true</code>.     </li> <li>         We can also combine filters using logical operators like <code>&amp;&amp;</code>, <code>||</code>, and <code>^</code>. For instance, typing <code>action=DequeueEvent &amp;&amp; state=WaitForPrepareResponses</code> will search for logs with the action <code>DequeueEvent</code> and the machine in the state <code>WaitForPrepareResponses</code>.     </li> </ul></p> Demo Video: How to filter a trace by fields? <p> </p> <p>Filtering by Text</p> <p>In addition to filtering by nodes, we can also filter out nodes and fields by text. This method of filtering will highlight any logs/nodes containing the text, or any of the log/node's field values that contain the text.</p> More explanation with an example <p><ul> <li>         For example, typing <code>true</code> in the search bar will highlight logs/nodes that either contain the word <code>true</code> or have fields containing the text <code>true</code>.     </li> </ul></p> Demo Video: How to filter a trace by text? <p> </p> <p>If the text you are trying to filter by contains any nonalphanumeric characters (i.e., any characters that aren't letters or numbers), you must surround the text with double quotes in order to filter.</p> More explanation with an example <p><ul> <li>         For example, if we want to filter by the text <code>status=0</code> and avoid treating it as a fields filter looking for logs/nodes with the <code>status</code> field equal to <code>0</code>, we need to surround it with double quotes like the following. Typing <code>\"status=0\"</code> in the search bar (with the double quotes!) will search for logs that contain the text <code>status=0</code>, or where the log's fields contain the text <code>status=0</code>.     </li> </ul></p> Demo Video: How to filter a trace that contains nonalphanumeric characters? <p> </p>"},{"location":"trace-visualizer/getting_started/","title":"Getting Started","text":"Getting Started <p>A trace visualizer provides visualization capabilities to visualize any sequence of events that happened within a distributed system from its trace files. The interactive UI of the trace visualizer makes it easier for a user to identify any patterns or anamolies in the behaviour of a system and helps find bugs quickly.</p> <p>Acknowledgement</p> <p>The trace visualizer in Peasy is built on top of ShiViz visualization tool. We recommend that you go through their Visualizing Distributed System Executions paper to learn more about the ShiViz tool.</p>"},{"location":"trace-visualizer/getting_started/#launching","title":"Launching","text":"<p>First, ensure that you are in a P project directory and that you have JSON error traces available!</p> <p>Once you have a JSON trace, you can press F6 to quickly launch the trace visualizer. This should open a new tab in your Visual Studio Code, and a file dialog window will appear, prompting you to select the JSON traces to visualize.</p> <p>Alternatively, you can launch the visualizer using the Visual Studio Code shortcut Cmd + Shift + P (Mac) or Ctrl + Shift + P (Windows) to open the Command Palette. Then, type <code>PeasyViz: Run</code> and click to launch the visualizer.</p> Demo Video: How to launch Peasy trace visualizer? <p> </p>"},{"location":"trace-visualizer/getting_started/#terminology","title":"Terminology","text":"<p>Log - The text of all the actions within the trace. Motif - Structural patterns in the visualization graph. Fields - Each JSON log entry contains the log text and fields associated with the log. For example, field <code>action</code> indicates the type of log it is (<code>SendEvent</code>, <code>ReceiveEvent</code>, <code>StateTransition</code>, etc.). Field <code>target</code> specifies the target machine of a <code>SendEvent</code> log entry, while field <code>machine</code> provides the name of the machine. More details can be found in P JSON Output.</p>"},{"location":"trace-visualizer/getting_started/#breakdown","title":"Breakdown","text":"Left Panel Center Panel Right Panel <ul> <li>Logs</li> <li>Motif finding</li> </ul> <ul> <li>Search bar for filtering</li> <li>Graph visualization of logs</li> </ul> <ul> <li>Log details</li> </ul>"},{"location":"trace-visualizer/p_json_output/","title":"P JSON Output","text":"P JSON Output"},{"location":"trace-visualizer/p_json_output/#basic-structure","title":"Basic Structure","text":"<p>Each P error trace JSON output is in the following format.</p> <pre><code>[\n{ ...log entry },\n{ ...log entry },\n...\n]\n</code></pre> <p>Each item in the array is a object containing information about a specific log entry.</p>"},{"location":"trace-visualizer/p_json_output/#log-entry","title":"Log Entry","text":"<pre><code>{\ntype: String,       // Always\ndetails: {          // Always \nlog: String,    // Always\nid: String,    error: String,\nevent: String,\ncreatorName: String,\ncreatorType: String,\nstate: String,\nstartState: String,\nendState: String,\npayload: Object,\naction: String,\nexception: String,\nhaltInboxSize: Number,\nwasBlocked: Boolean,\nsender: String,\ntarget: String,\nopGroupId: String,\nisTargetHalted: Boolean,\nisEntry: Boolean,\nisInHotState: Boolean,\neventType: String,\neventTypes: String[],\nmonitor: String,\nstrategy: String,\nstrategyDescription: String,\nclock: Object,\n}   }\n</code></pre> <p>Each log object contains type and details. Fields in details are available based on the type of log it is.</p>"},{"location":"trace-visualizer/p_json_output/#log-types-and-fields","title":"Log Types and Fields","text":"<p>AssertionFailure \u2014 log, error CreateActor \u2014 log, id, creatorName, creatorType, clock CreateStateMachine \u2014 log, id, creatorName, creatorType, clock DefaultEventHandler \u2014 log, id, state, clock DequeueEvent \u2014 log, id, event, state, payload, clock ExceptionHandled \u2014 log, id, state, action, exception, clock ExceptionThrown \u2014 log, id, state, action, exception, clock GoToState \u2014 log, id, startState, endState, clock Halt \u2014 log, id, haltInboxSize, clock PopState \u2014 log, id, startState, endState, clock PopStateUnhandledEvent \u2014 log, id, state, event, clock PushState \u2014 log, id, startState, endState, clock RaiseEvent \u2014 log, id, state, event, payload, clock ReceiveEvent \u2014 log, id, state, event, wasBlocked, payload, clock SendEvent \u2014 log, sender, state, event, target, opGroupId, isTargetHalted, payload, clock StateTransition \u2014 log, id, state, isEntry, clock WaitEvent \u2014 log, id, state, eventType, clock WaitMultipleEvents \u2014 log, id, state, eventTypes, clock CreateMonitor \u2014 log, monitor, clock MonitorProcessEvent \u2014 log, monitor, state, event, payload, clock MonitorRaiseEvent \u2014 log, monitor, state, event, payload, clock MonitorStateTransition \u2014 log, monitor, isEntry, isInHotState, clock StrategyDescription \u2014 log, strategy, strategyDescription </p> <p>Check out this example P JSON output based on the Two Phase Commit Tutorial from the P documentation!</p>"}]}