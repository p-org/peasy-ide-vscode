{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Peasy: An Intuitive Development Environment for P <p>  Download the Peasy Extension!  </p> <p>Peasy Overview:</p> <p>Peasy is a VSCode Language Extension created by the P team to enable a richer, more intuitive user interface while developing P programs. It equips users with a familiar programming environment for developing, visualizing, and reviewing P code, expanding the true potential of P users.</p> <p>Peasy achieves this by providing a VS code language extension for editing P programs and an intuitive interface for visualizing and reviewing the formal design and specification of a distributed system as a collection of P state machines.</p> Peasy Extension's Features <p>Syntax Highlighting Learn more.</p> <p>Automatic Compilation Learn more.</p> <p>Snippets Learn more.</p> <p>Error Reporting Learn more.</p> <p>Testing Framework Learn more.</p> <p>Trace Visualizer Learn more.</p> Peasy Extension's Shortcuts Keypress Description F4 Shows a dropdown menu of all the P projects in the current directory F5 Compiles the Currently Selected P Project F6 Opens the Peasy Trace Visualizer Webview F7 Generates code to visualize the currently selected P project's state machines"},{"location":"contribute/","title":"Contributing to the Peasy Extension","text":"Contribute to the Peasy Extension! <p>If you would like to contribute or add to the current state of the Peasy extension, here are the steps to do so:</p> <ol> <li> <p>Clone the Peasy extension repository.</p> </li> <li> <p>Navigate into the directory of the extension on your Terminal or on a coding editor. Run the following command on the command line.</p> <pre><code>cd peasy-ide-vscode\n</code></pre> </li> <li> <p>Build the repository to convert Typescript code into Javascript code.</p> <p>How to Build the Peasy Extension Repository</p> <ul> <li>Mac: Cmd+Shift+B</li> <li>Windows: Ctrl+Shift+B</li> </ul> </li> <li> <p>In order to test out the extension, press F5 to create an <code>Extension Development Host</code> where users can open P projects to view how the extension looks in its current state.</p> </li> </ol> <p></p>"},{"location":"motivations/","title":"The Motivation Behind Peasy","text":"The Motivation Behind the Peasy Extension <p>Peasy brings the full power of an Intuitive Development Environment, including an editor, visualizer, checker, reviewer to P users.</p> <p>Peasy achieves this by providing a VS code language extension for editing P programs and an intuitive interface for visualizing and reviewing the formal design and specification of a distributed system as a collection of P state machines.</p> <p>Peasy enables the common interface of unit testing to model checking of P programs.</p> <p>Peasy also provides a trace visualizer to debug counter examples reported by model checker as a message sequence chart and also the ability to single step through the error trace using the VS code debugger.</p> <p>Peasy can also be used as a documentation tool leveraged by the service teams during design reviews to better understand/describe the complex system design.</p> Transforming the User Experience <p>From the very beginning of users utilizing P to write formal models of their projects and problems, users clamored for a VSCode extension for the language P that would allow them to streamline the process of developing in P. Therefore, the P Team went to work to create a plugin that would suit all their users' needs. We aim for this extension to attract new users to develop in P with ease as well as transform the user experience for current P developers.</p>"},{"location":"features/error_tracing/","title":"Trace Visualizer","text":""},{"location":"features/error_tracing/#getting-started","title":"Getting Started","text":"<p>First, make sure that you are in a P project directory and that you have JSON error traces available!</p> <p>Once you have a JSON trace, you can press F6 to quick launch the trace visualizer. This should open a new tab in your Visual Studio Code and a file dialog window should open to prompt you to select JSON traces to visualize.</p> <p>Another alternative to launch the visualizer is to use the Visual Studio Code shortcut Cmd + Shift + P (Mac) or Ctrl + Shift + P (Windows) to open the Command Palette and typing <code>PeasyViz: Run</code> and clicking to launch the visualizer.</p>"},{"location":"features/error_tracing/#terminology","title":"Terminology","text":"<p>Log - The text of all the actions wthin the trace. Motif - Structural patterns in the visualization graph. Fields - Each JSON log entry contains the log text, and fields associated with the log. I.e., field <code>action</code> is the type of log it is (<code>SendEvent</code>, <code>ReceiveEvent</code>, <code>StateTransition</code>, etc...). Field <code>target</code> is the target machine of a <code>SendEvent</code> log entry. Field <code>machine</code> is the name of the machine.</p>"},{"location":"features/error_tracing/#interface-breakdown","title":"Interface Breakdown","text":"Left Panel Center Panel Right Panel <ul> <li>Logs</li> <li>Motif finding</li> </ul> <ul> <li>Search bar for filtering</li> <li>Graph visualization of logs</li> </ul> <ul> <li>Log details</li> </ul>"},{"location":"features/error_tracing/#features","title":"Features","text":""},{"location":"features/error_tracing/#basics","title":"Basics","text":"<ol> <li> <p>Hovering over a log highlights the corresponding node in the main panel and vice versa.</p> <p> </p> </li> <li> <p>A series of individual nodes are collapsible for compactness in UI.</p> <p> </p> </li> <li> <p>Machines are toggleable so users can show/hide a machine.</p> <p> </p> </li> <li> <p>Filtering a machine will remove all machines that has not direct connection to the current machine. </p> <p><ul> <li>         In the video demo, we first filtered machine \"Coordinator(6)\", which hid all machines that has no direct connections to \"Coordinator(6)\". We then filtered machine \"Client(9)\" as well, which removed all other machines as none of them were connected to both \"Coordinator(6)\" and \"Client(9)\".     </li> </ul></p> <p> </p> </li> <li> <p>Clicking on an individual node will open a dialog box and it will have the log text by default and a \"Show More\" button if it has any fields. Clicking on the \"Show More\" will show details regarding the log.</p> <p> </p> </li> </ol> <p></p>"},{"location":"features/error_tracing/#search-bar","title":"Search Bar","text":"<ol> <li> <p>Fields filtering using \"=\". </p> <p><ul> <ul> <li> <code>isEntry=true</code> looks for logs that has a field of isEntry and its value is true         </li> <li> <code>action=DequeueEvent &amp;&amp; state=WaitForPrepareResponses</code> looks for logs that are of action DequeueEvent and the machine is in state <code>WaitForPrepareResponses</code> </li> </ul> </ul></p> <p> </p> </li> <li> <p>Text filtering. Filtering by text highlights a node if the log contains the text or the log's fields contains the text.</p> <p><ul> <li> <code>true</code> will look for logs that either contains the the word \"true\" or the log has fields that contain the word \"true\"     </li> </ul></p> <p> </p> </li> <li> <p>Nonalphanumeric text filtering. If the text contains any nonalphanumeric characters, surround the text with quotes.</p> <p><ul> <li> <code>\"status=0\"</code> look for logs that contains the text \"status=0\" or the log's fields contains the text \"status=0\"     </li> </ul></p> <p> </p> </li> </ol>"},{"location":"features/error_tracing/#motifs","title":"Motifs","text":"<ol> <li> <p>Pre-built options. Selecting one of the default motif options will highlights paths in the visualization that matches the motif pattren. In the example, paths in the main panel that matches Motif 1 (a simple sending request pattern, one machine sents to another machine) are highlighted.</p> <p> </p> </li> <li> <p>Building custom motifs. You can build your own custom motif pattern in the search bar under the \"Structured Search\" tab. In the example, the custom motif searches for pattern where machine 1 sends something to machine 2, and then later sends something to machie 3, and lastly sends something to machine 4.     <ul> <li>Single click creates a node in a machine</li> <li>Click and drag connects one machine's node to another machine's node</li> <li>Double clicking a node deletes it</li> </ul></p> <p> </p> </li> <li> <p>P motifs. You can find specific P send-receive patterns within the visualizer using the following syntax in the search bar.     <ul> <li>Syntax</li> <ul> <li><code>#pmotif=({constraint1}&gt;{constraint2}&gt;&gt;{constraint3}...)</code></li> <ul> <li><code>constraint[n]</code> is any text filtering format supported by the basic search bar</li> <li><code>&gt;</code> and <code>&gt;&gt;</code> indicates the searching behavior after a constraint is satisfied</li> <ul> <li> <code>#pmotif=({constraint1}&gt;{constraint2})</code> means that we are looking for a send event that satisfies <code>constraint1</code> and then the immediate first send event that satisfies <code>constraint2</code> </li> <li> <code>#pmotif=({constraint1}&gt;&gt;{constraint2})</code> means that we are looking for a send event that satisfies <code>constraint1</code> and then any send event afterwards that satisfies constraint <code>constraint2</code> </li> </ul> </ul> <li>All P send-receive patterns matching the specified P motif are highlighted</li> </ul> <li>Example</li> <ul> <li><code>#pmotif=({eInformCoordinator &amp;&amp; target=\"Participant(3)\"}&gt;&gt;{\"status=0\"}&gt;{target=\"Client(8)\"})</code></li> <li>The constraints of the pattern we are looking for:</li> <ul> <li><code>constraint1</code> = <code>eInformCoordinator &amp;&amp; target=\"Participant(3)\"</code></li> <li><code>constraint2</code> = <code>\"status=0\"</code></li> <li><code>constraint3</code> = <code>target=\"Client(8)\"</code></li> </ul> <li>The pattern breakdown:</li> <ul> <li>We first look for a send event that satisfies <code>constraint1</code> \u2014 that the log contains the text \"eInformCoordinator\" AND field <code>target=\"Participant(3)\"</code></li> <li>Then, after a send event from machine A to B satisfying <code>constraint1</code> is found, we are looking for another send event from machine B to C that satisfies <code>constraint2</code> anytime afterwards (indicated by the search behavior <code>&gt;&gt;</code>) \u2014 that the log constains the text \"status=0\"</li> <li>Lastly, after the send event from machine B to C satisfying <code>constraint2</code> is found, we are looking for one last send event from machine C to D that satisfies <code>constraint3</code> immediately afterwards (indicated by the search behavior <code>&gt;</code>) \u2014 that the log has field <code>target=\"Client(8)\"</code></li> </ul> <li>Caveat</li> <ul> <li>Machines A, B, C, D doesn't necessarily have to be all different machines \u2014 this was just to show that the send event is between two different machines</li> </ul> </ul> <li>             In the video, we are looking for first a send event that contains text \"eWriteTransReq\", then immediately another send event that contains text \"eWriteTransResp\", and lastly another immediate send event that contains the text \"eReadTransReq\"         </li> </ul></p> <p> </p> </li> </ol>"},{"location":"features/snippets/","title":"Snippets","text":"Snippet Auto-Completion in Peasy <p>Coding in P became much easier with snippets! Snippets allow P developers to complete templates of repeating code patterns in P, such as state machines, different statements, test cases, and more. Snippets appear through Intellisense when users type out the beginning of P keywords such as machine or test or send.</p> <p>After selecting a particular snippet, users can press <code>Tab</code> in order to jump to edit each placeholder in the snippet.</p> <p>Snippets help P developers code faster and easier because they don't need to refer back to documentation for help when coding common data structures in P. Below is an example tutorial of coding with snippets in P!</p>"},{"location":"features/syntax_highlighting/","title":"Syntax Highlighting","text":"Syntax Highlighting in Peasy <p>Syntax highlighting in P makes developing programs in P easier, faster, and more enjoyable.</p> <p>We created a Custom P theme that the P team prefers to develop in P, but feel free to change the theme to whatever you would like! </p>"},{"location":"features/testing/","title":"How to Run P Test Cases","text":"How to Run P Test Cases <p>Testing in P is made easy with this modification to the Peasy extension!</p> <p>Navigate to the Testing Panel in VSCode, and users will find names of P testing folders with P test cases under them. The Testing Panel allows users to easily run test cases from anywhere in a P project directory by clicking the play button.</p> <p>Users can also navigate to the testing folders by pressing the icon to the right of the play button. If an user navigates to a testing file, they can also click a green play button to run P test cases there too!</p>"},{"location":"features/visualizations/","title":"State Machine Visualizations","text":"Peasy State Machine Visualizations <p>Many P users wanted a method of creating visualizations of P state machines and their transitions, states, and events to help supplement design documents, visualize P code, and help to better understand the way P state machines worked. With the help of the open source tool Stately's State Machine Visualization, that dream is now realized.</p> <p>In order to create visualizations of P state machines, follow these steps or scroll down to watch the tutorial:</p> <ol> <li>First, select the P project you want to work with. (If you are already working in a directory with just one P project, then skip this step.) Otherwise, press F6 and select the project you would like to visualize.</li> <li>Now, press F7 to run the command <code>p compile --mode stately</code> in the terminal. Your visualization code is generated! A message in red should be sent through the terminal.    </li> <li>Navigate to the file using Ctrl <code>Click</code> or Cmd <code>Click</code>. Copy-and-paste the file contents into https://stately.ai/viz.</li> <li>Click the Visualize button on the bottom left!</li> </ol> <p>Voila! Here is an example visualization using the P Tutorial's Two Phase Commit Project. </p> How to Navigate Stately's Open Source Visualization Website <p>Every visualization contains exactly one state machine. The name of the machine is at the top left; in this case, the machine is called <code>Coordinator</code>. All the shapes and arrows inside are part of the state machine <code>Coordinator</code>.</p> <p>States are represented with squares, and events are represented with ovals.The beginning state is pointed to with an arrow. In the above case, the beginning state is <code>Init</code>.</p> <p>The state WaitForTransaction is outlined in blue because the machine always travelled from the <code>Init</code> State to the WaitForTransaction state. The event <code>eTransReq</code> is colored in light blue because the state machine <code>Coordinator</code> is waiting for that one event to happen. Click <code>eWhileTransReq</code>, and the three other events will light up because the <code>Coordinator</code> machine is now waiting for one of the other three events to happen.</p> <p>This way, P users can interact with these P state machine visualizations too!</p> <p>Stately's website contains four tabs:</p> <ul> <li>Code Tab: Users use this tab to copy-and-paste code to visualize state machines.</li> <li>State Tab: This tab provides information on the state the user is currently at in the machine.</li> <li>Events Tab: This tab logs all of the events that have occured so far among all machines.</li> <li>Actors Tab: Users can switch between different machines' visualizations in this tab.</li> </ul> State Machine Visualization Tool Tutorial"},{"location":"features/compilation/basic/","title":"Automatic Compilation","text":"Automatic Compilation in Peasy <p>Compiling in P is made easy with this addition to our extension!</p> <p>Simple press F5 or <code>Save</code> in your VSCode terminal and your project will automatically compile the current P project folder with the <code>p compile</code> command.</p> <p>The Peasy extension also handles cases where there are multiple P project files in the current working directory. Press F4 and a pop-up will appear, displaying all the P projects inside of the folder. Select the project you want to work on at the moment, and that project will compile every time you press F5.</p>"},{"location":"features/compilation/error_reporting/","title":"Error Reporting","text":"Error Reporting in Peasy <p>The Peasy extension automatically detects errors in P. There are two types of errors in P: Parse Errors and Type Errors.</p> <p>If compiling a P project with F5 triggers errors, the user may simply open the <code>Problems</code> panel in VSCode to view all the errors within their project. Then, users can navigate to the location of the error by simply clicking the error.</p>"},{"location":"features/compilation/multiple/","title":"Multiple Projects","text":"Multiple Projects: Automatic Compilation <p>When working in a P project directory with a single project, the Peasy extension handles which project is compiled for you!</p> <p>But what if there are multiple projects within a single directory?</p> <p>To select another project that compiles after pressing F5 and <code>Save</code>, press F4. This will trigger a pop-up that shows all the available P projects available to compile in your current working directory. Simply click or select the project you wish to compile automatically, and change the selected project later as needed!</p>"}]}