{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Peasy: An Intuitive Development Environment for P <p>  Download the Peasy Extension!  </p> <p>Peasy Overview:</p> <p>Peasy is a VSCode Language Extension created by the P team to enable a richer, more intuitive user interface while developing P programs. It equips users with a familiar programming environment for developing, visualizing, and reviewing P code, expanding the true potential of P users.</p> <p>Peasy achieves this by providing a VS code language extension for editing P programs and an intuitive interface for visualizing and reviewing the formal design and specification of a distributed system as a collection of P state machines.</p> <p>Peasy Extension's Features</p> <p>Syntax Highlighting Learn more.</p> <p>Automatic Compilation Learn more.</p> <p>Snippets Learn more.</p> <p>Error Reporting Learn more.</p> <p>Testing Framework Learn more.</p> <p>Error Tracing Visualization Learn more.</p>"},{"location":"contribute/","title":"Contributing to the P Extension","text":"Contribute to the P Extension! <p>If you would like to contribute or add to the current state of the P extension, here are the steps to do so:</p> <ol> <li> <p>Clone the P extension repository.</p> </li> <li> <p>Navigate into the directory of the extension on your Terminal or on a coding editor. Run the following command on the command line.</p> <pre><code>cd peasy-ide-vscode\n</code></pre> </li> <li> <p>Build the repository to convert Typescript code into Javascript code.</p> <p>How to Build the P Extension Repository</p> <ul> <li>Mac: Cmd+Shift+B</li> <li>Windows: Ctrl+Shift+B</li> </ul> </li> <li> <p>In order to test out the extension, press <code>F5</code> to create an <code>Extension Development Host</code> where users can open P projects to view how the extension looks in its current state.</p> </li> </ol> <p></p>"},{"location":"motivations/","title":"The Motivation Behind Peasy","text":"The Motivation Behind the P Extension <p>Peasy brings the full power of an Intuitive Development Environment, including an editor, visualizer, checker, reviewer to P users.</p> <p>Peasy achieves this by providing a VS code language extension for editing P programs and an intuitive interface for visualizing and reviewing the formal design and specification of a distributed system as a collection of P state machines.</p> <p>Peasy enables the common interface of unit testing to model checking of P programs.</p> <p>Peasy also provides a trace visualizer to debug counter examples reported by model checker as a message sequence chart and also the ability to single step through the error trace using the VS code debugger.</p> <p>Peasy can also be used as a documentation tool leveraged by the service teams during design reviews to better understand/describe the complex system design.</p> Transforming the User Experience <p>From the very beginning of users utilizing P to write formal models of their projects and problems, users clamored for a P extension that would allow them to streamline the process of developing in P. Therefore, the P Team went to work to create a plugin that would suit all their users' needs. We aim for this extension to attract new users to develop in P with ease as well as transform the user experience for current P developers.</p>"},{"location":"features/compilation/","title":"Automatic Compilation","text":"Automatic Compilation in P <p>Compiling in P is made easy with this addition to our extension!</p> <p>Simple press <code>F5</code> OR Save and your project will automatically compile the current P project folder with the <code>p compile</code> command. </p> <p>The P extension also handles cases where there are multiple P project files in the current working directory. Press <code>F4</code> and a pop-up will appear, displaying all the P projects inside of the folder. Select the project you want to work on at the moment, and that project will compile every time you press <code>F5</code>.</p>"},{"location":"features/error_reporting/","title":"Error Reporting","text":"Error Reporting in P <p>The P extension automatically detects errors in P. There are two types of errors in P: Parsing Errors and Type Errors.</p> <p>If running <code>p compile</code> triggers errors, the user may simply open the <code>Problems</code> panel in VSCode to view all the errors within their project.</p> <p></p>"},{"location":"features/error_tracing/","title":"Error Tracing Visualization","text":"Error Tracing Visualizations in P"},{"location":"features/snippets/","title":"Snippets","text":"Snippet Auto-Completion in P <p>Coding in P became much easier with snippets! Snippets allow P developers to auto-complete P data structures and syntactical structures. They can 'fill-in-the-blank' of each structure. </p>"},{"location":"features/syntax_highlighting/","title":"Syntax Highlighting","text":"Syntax Highlighting in P <p>Syntax highlighting in P makes developing programs in P easier, faster, and more enjoyable.</p> <p>We created a Custom P theme that the P team prefers to develop in P, but feel free to change the theme to whatever you would like! </p>"},{"location":"features/testing/","title":"Testing Framework","text":"Testing Framework in P <p>Testing in P is made easy with this modification to the P extension!</p> <p>Navigate to the Testing Section of a P directory, and users will find names of P testing folders with P test cases under them. The Testing tab allows users to easily run test cases from anywhere in a P project.</p>"}]}