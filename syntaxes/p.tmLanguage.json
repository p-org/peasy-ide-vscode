{
  "name": "P language",
  "scopeName": "source.p",
  "fileTypes": [
    "p"
  ],
  "uuid": "02d90f6f-553b-4a22-a121-a8ddeb6dade4",
  "patterns": [
    {
      "name": "meta.vardecl",
      "match": "(\\bvar\\b)\\s*([\\w'?]+\\b(?!<))?\\s*",
      "captures": {
        "1": {
          "name": "keyword.statement.structural"
        },
        "2": {
          "name": "variable"
        }
      }
    },
    {
      "name": "meta.typedecl",
      "match": "(\\btype\\b)\\s*([\\w'?]+\\b(?!<))?\\s*",
      "captures": {
        "1": {
          "name": "keyword.statement.structural"
        },
        "2": {
          "name": "storage.type.other"
        }
      }
    },
    {
      "name": "keyword.statement.structural",
      "match": "\\bvar\\b|\\bstate\\b|\\bhot\\b|\\bcold\\b|\\bstart\\b|\\bspec\\b|\\bcase\\b|\\bmodule\\b|\\btest\\b|\\bmain\\b|\\bfun\\b|\\bobserves\\b|\\bentry\\b|\\bexit\\b|\\bwith\\b|\\bunion\\b|\\main\\b|\\btype\\b"
    },
    {
      "name": "keyword.control",
      "match": "\\bif\\b|\\bgoto\\b|\\bforeach\\b|\\bon\\b|\\bdo\\b|\\belse\\b|\\bwhile\\b|\\breturn\\b|\\bbreak\\b|\\bcontinue\\b"
    },
    {
      "name": "keyword.statement.other",
      "match": "\\bassert\\b|\\bprint\\b|\\bnew\\b|\\braise\\b|\\bsend\\b|\\bannounce\\b"
    },
    {
      "name": "support.function",
      "match": "\\bhalt\\b|\\bthis\\b|\\bformat\\b|\\bnew\\b|\\bas\\b|\\bto\\b|\\bchoose\\b"
    },
    {
      "name": "support.function",
      "match": "\\$"
    },
    {
      "name": "entity.name.function.primitive",
      "match": "\\bsizeof\\b|\\bkeys\\b|\\bvalues\\b|\\bin\\b|\\bdefault\\b"
    },
    {
      "name": "storage.type",
      "match": "\\b\\w*Interface\\b|\\bI[A-Z]\\w*\\b"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#primitives"
    },
    {
      "include": "#functiondeclare"
    },
    {
      "include": "#functioncall"
    },
    {
      "include": "#tuples"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#othertypes"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    }
  ],
  "repository": {
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison",
          "match": "<|>|<=|>=|&&|(\\|\\|)"
        },
        {
          "name": "keyword.operator.arithmetic",
          "match": "\\-|\\+|\\*|\\%|\\/|\\!"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language",
          "match": "\\btrue\\b|\\bfalse\\b"
        },
        {
          "name": "constant.numeric",
          "match": "\\b([1-9]+[0-9]*|0|[0-9]*\\.[0-9]*)\\b"
        },
        {
          "name": "string",
          "match": "(\".*\")"
        }
      ]
    },
    "tuples": {
      "patterns": [
        {
          "name": "meta.tuple.named.types",
          "begin": "(\\()([\\w]+)\\s?:\\s?([\\w]+)",
          "beginCaptures": {
            "3": {
              "name": "storage.type"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#parameters"
            },
            {
              "include": "#constants"
            }
          ]
        },
        {
          "name": "meta.tuple.named.assigned",
          "begin": "(\\()([\\w]+)\\s?=",
          "beginCaptures": {
            "2": {
              "name": "storage.type"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#assignments"
            },
            {
              "include": "#attributes"
            },
            {
              "include": "#constants"
            }
          ]
        },
        {
          "name": "meta.tuple.unnamed",
          "begin": "(\\()",
          "end": "\\)",
          "patterns": [
            {
              "name": "storage.type",
              "match": "([\\w])+"
            },
            {
              "include": "#primitives"
            },
            {
              "include": "#operators"
            }
          ]
        }
      ]
    },
    "functiondeclare": {
      "name": "meta.method.functiondecl",
      "begin": "(fun)\\s+([[:alpha:]_][[:alnum:]_]*)(?=(\\())",
      "beginCaptures": {
        "1": {
          "name": "keyword.other"
        },
        "2": {
          "name": "entity.name.function"
        }
      },
      "end": "(\\))\\s?(:\\s?[[:alpha:]_]+)?",
      "endCaptures": {
        "2": {
          "name": "storage.type"
        }
      },
      "patterns": [
        {
          "include": "#parameters"
        }
      ]
    },
    "functioncall": {
      "name": "meta.method.functioncall",
      "begin": "([[:alpha:]_][[:alnum:]_]*)(?=(\\())",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.user"
        }
      },
      "end": "(\\))",
      "patterns": [
        {
          "include": "#parameters"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.p"
            }
          }
        },
        {
          "name": "comment.line.double-slash",
          "match": "(//).*$\\n?",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.p"
            }
          }
        }
      ]
    },
    "primitives": {
      "name": "storage.type.primitives",
      "match": "\\bint\\b|\\bbool\\b|\\bfloat\\b|\\bstring\\b|\\benum\\b|\\bmachine\\b|\\bevent\\b"
    },
    "othertypes": {
      "name": "storage.type.other",
      "match": "\\bseq\\b|\\bmap\\b|\\bset\\b|\\bany\\b|\\bdata\\b"
    },
    "assignments": {
      "name": "assignments",
      "match": "([\\w]+)\\s?=",
      "captures": {
        "1": {
          "name": "storage.type"
        }
      }
    },
    "attributes": {
      "name": "meta.structure.attribute",
      "match": "([[:alpha:]_]+)\\.([[:alpha:]_]+)",
      "captures": {
        "2": {
          "name": "storage.type"
        }
      }
    },
    "parameters": {
      "name": "meta.parameters",
      "match": ":\\s?([\\w]+)",
      "captures": {
        "1": {
          "name": "storage.type"
        }
      }
    }
  }
}
